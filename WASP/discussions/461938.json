[
  {
    "Id": "1106571",
    "ThreadId": "461938",
    "Html": "I'm not sue how other people use WASP; but, I'm trying to find out how to run my my WASP-dependent scripts on any Win7/win8 PC; even if it doesnt have WASP module already installed.\r<br />\n<br />\nAn Internet based packaging installer wouldn't really work since some PCs may not have Internet access.\r<br />\n<br />\nI have considered to use &quot;System.Windows.UIAutomation&quot; from within PowerShell; so there's no dependency for WASP at all; but, unfortunately it t looks like accessing .NET functionality via  Powershell isn't very intuitive.  I haven't been able to find sample Powershell scripts which clearly demonstrate how to the basic common automation tasks below via .NET.  I wasn't able to figure out how to do it by looking at the WASP module code unfortunately.<br />\n<ul>\n<li>Minimize Window (title or process)</li>\n<li>Maximize Window (title or process)</li>\n<li>Resize Window (title or process)</li>\n<li>Hide Window (title or process)</li>\n<li>Activate Window (title or process)</li>\n<li>\nSendkey special characters such Windows-logo-Key+CTRL+ALT+F8<br />\n</li>\n</ul>\nIf there are no sample scripts, then it would be great if there was a Powershell script compiling tool which can embed file dependencies in the EXE; and, extract the file dependencies upon execution (same way done in AutoIt or other 3rd pary tools for &quot;compiling&quot; batch files or VB Scripts).  I haven't found such a solution for that either.\r<br />\n<br />\nAny useful help would be greatly appreciated!<br />\n",
    "PostedDate": "2013-10-11T12:47:26.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1106984",
    "ThreadId": "461938",
    "Html": "If you want something really minimal, you need to use the pure-script WASP 2 module.<br />\n<br />\nThe module is still in beta, and the PoshCode installer is still in beta (and may not work on PS2 at all), but you can try this command:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n\\\\PoshCode.org\\Modules\\Install \\\\PoshCode.org\\Modules\\WASP.psd1\r\n</pre></div>If you get timeouts (command not found) trying to execute off the WebDAV share, you can try the steps in <a href=\"http://support.microsoft.com/kb/2445570\" rel=\"nofollow\">kb2445570</a> or you can download the Install.ps1 scripts and the <a href=\"http://poshcode.org/Modules/WASP-2.0.0.6.psmx\" rel=\"nofollow\">http://poshcode.org/Modules/WASP-2.0.0.6.psmx</a> (which is a windows Package file -- you can actually just rename it to zip and then unzip and find the &quot;WASP&quot; module folder and install it manually instead of using the Install.ps1)<br />\n<br />\nAnyway, I haven't uploaded the source to WASP 2 here because I'm still not happy with the command surface, it includes stuff like the horribly un-powershelly:<br />\n<br />\n   Invoke-Window.SetWindowVisualState -State Minimized<br />\n<br />\nBut you can probably work with it anyway, and presumably you'll be able to figure out how to min/max/resize/focus just by looking at the commands that are exported from the module.<br />\n<br />\nYou cannot send &quot;Win&quot; with the Send-Keys or Send-UIKeys, they're based on <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.aspx\" rel=\"nofollow\">System.Windows.Forms.SendKeys</a>, but the rest of it is documented there.  Having said that, I'd argue there isn't anything you should need to automate with the Win key that you can't automate some other way ;-)<br />\n<br />\nI've been meaning to migrate the Send-UIKeys to use <a href=\"https://inputsimulator.codeplex.com/\" rel=\"nofollow\">InputSimulator</a> but haven't gotten around to it. That one can definitely send the logo key, etc.<br />\n<br />\n<br />\nP.S.: There <em>are</em> existing &quot;script compilers&quot; for PowerShell (including as part of third-party editors/shells), including at least one which &quot;encrypts&quot; the scripts so it's harder to extract with reflection.<br />\n<br />\nThey basically just embed the script as a resource, and then use PowerShell's APIs to execute (so all you need is a modern Windows box that has PowerShell preinstalled), and you can double-click the exe.  Frankly, I believe that's shortsighted, but never mind,  as far as I know, they don't deal with compiling third-party binary modules into your resulting .exe and importing them as modules into the PowerShell runspace, but <em>all of that is certainly possible</em> with the PowerShell API, although I can't imagine a non-nefarious reason that would make doing so worthwhile over using an installer like the PoshCode module or, within a corporation, a simple UNC path where you store your modules...<br />\n",
    "PostedDate": "2013-10-13T21:52:35.297-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]